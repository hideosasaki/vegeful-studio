/**
 * Beaglebone Blackで温度、湿度を測る。
 * @author veeplant http://twilog.org/veeplant
 */
var _bone = require('bonescript');

module.exports = VegefulStudioTemperature;

/**
 * ベジフルスタジオ温度計を表す。
 * @constructor
 */
function VegefulStudioTemperature() {
    this.initialize.apply(this, arguments);
}
VegefulStudioTemperature.prototype = {
    /**
     * コンストラクタ
     */
    initialize: function() {
        // センサーを定義
        var sensors = [];
        sensors[0] = new TemperatureSensor('P9_40', 'LM61');
        sensors[1] = new TemperatureSensor('P9_39', 'LM61', 1.3);
        sensors[2] = new TemperatureSensor('P9_38', 'LM61', -1.7);
        sensors[3] = new TemperatureSensor('P9_37', 'LM35', -1.7);
        sensors[4] = new TemperatureSensor('P9_36', 'LM35', -1.7);  

        /**
         * 外部気温・湿度
         * @type {Psychrometer}
         */
        this.outer = new Psychrometer(sensors[0], sensors[1]);;

        /**
         * 内部気温・湿度
         * @type {Psychrometer}
         */
        this.inner = new Psychrometer(sensors[3], sensors[4]);
        
        /**
         * 水温
         * @type {TemperatureSensor}
         */
        this.water = sensors[2];
    },
};

/**
 * 温度センサーを表す。
 * @constructor
 */
function TemperatureSensor() {
    this.initialize.apply(this, arguments);
}
TemperatureSensor.prototype = {
    /**
     * コンストラクタ
     * @param {String} port アナログポート名 eg:'P9_40'
     * @param {String} type センサータイプ 'LM61'/'LM60'/'LM35'
     * @param {Number} adjustment 温度誤差修正値 (デフォルト0)
     */
    initialize: function(port, type, adjustment) {
        /**
         * アナログポート名
         * @type {String}
         */
        this.port = port;

        /**
         * センサータイプ
         * @type {String}
         */
        this.type = type;
        
        /**
         * 温度誤差修正値
         * @type {String}
         */
        this.adjustment = adjustment || 0;

        /**
         * 計測日付
         * @type {Date|null}
         */
        this.recorded = null;

        /**
         * センサーからの取得値(0-1)
         * @type {Number|null}
         */
        this.value = null;

        /**
         * ミリボルト(mV)
         * @type {Number|null}
         */
        this.millivolt = null;

        /**
         * 摂氏温度(℃)
         * @type {Number|null}
         */
        this.celsius = null;

        /**
         * @private
         * リトライ最大回数（センサーの精度を上げるため1回は必ず実施される）
         * @type {Number}
         */
        this.retryMax_ = 2;

        /**
         * @private
         * BeagleBoneのアナログボートの最大ミリボルト
         * @type {Number}
         */
        this.millivoltMax_ = 1800;

        /**
         * @private
         * 現在のリトライ回数
         * @type {Number}
         */
        this.retry_ = 0;
    },
    /**
     * 計測する。
     * @param {Function} callback コールバック
     */
    measure: function(callback) {
        // 計測値を未計測状態にする
        this.value = null;
        this.millivolt = null;
        this.celsius = null;
        this.recorded = null;
        // アナログポート読み込み開始
        _bone.analogRead(
            this.port,
            (function(x) {
                // 計測完了時刻をセット
                this.recorded = new Date();
                if (0 == this.retry_ || x.err || isNaN(x.value)) {
                    if (this.retry_ < this.retryMax_) {
                        // 1回目の計測、またはエラー時はリトライ
                        this.retry_++;
                        this.measure(callback);
                    } else {
                        // リトライ最大値を超えたので、エラーを通知してコールバック
                        this.retry_ = 0;
                        var err = x.err || 'x.value is NaN';
                        callback(err);
                    }
                    return;
                }
                // 計測値をセット
                this.retry_ = 0;
                this.value = x.value;
                this.millivolt = Math.round(this.millivoltMax_ * x.value); // 小数値は無意味なのでカット
                this.celsius = this['type' + this.type + '_'](); // this.typeZZZZ_()を動的にコール
                // 計測完了のためコールバック
                callback();
            }).bind(this)
        );
    },
    /**
     * カンマ区切りの計測値を返す
     * @return {String}
     */
    toString: function() {
        return ''
            + ',' + this.celsius
        ;
    },
    /**
     * @private
     * LM61のミリボルトから摂氏温度を返す。
     * @return {Number} 摂氏温度 ℃
     */
    typeLM61_: function() {
        return (this.millivolt - 600) / 10;
    },
    /**
     * @private
     * LM60のミリボルトから摂氏温度を返す。
     * @return {Number} 摂氏温度 ℃
     */
    typeLM60_: function() {
        return (this.millivolt - 424) / 6.25;
    },
    /**
     * @private
     * LM35のミリボルトから摂氏温度を返す。
     * @return {Number} 摂氏温度 ℃
     */
    typeLM35_: function() {
        return this.millivolt / 10;
    },
};

/**
 * 乾湿計を表す。
 * 参考： http://www.eleki-jack.com/FC/2009/04/36arduino.html
 * @constructor
 */
function Psychrometer() {
    this.initialize.apply(this, arguments);
}
Psychrometer.prototype = {
    /**
     * コンストラクタ
     * @param {TemperatureSensor} drySensor 乾球の温度センサー
     * @param {TemperatureSensor} wetSensor 湿球の温度センサー
     */
    initialize: function(drySensor, wetSensor) {
        /**
         * 乾球の温度センサー
         * @type {TemperatureSensor}
         */
        this.drySensor = drySensor;

        /**
         * 湿球の温度センサー
         * @type {TemperatureSensor}
         */
        this.wetSensor = wetSensor;

        /**
         * 摂氏温度(℃)
         * @type {Number|null}
         */
        this.celsius = null;

        /**
         * 相対湿度(%)
         * @type {Number|null}
         */
        this.humidity = null;
    },
    /**
     * 計測する。
     * @param {Function} callback コールバック
     */
    measure: function(callback) {
        // 計測値を未計測状態にする
        this.celsius = null;
        this.humidity = null;
        // 乾球の計測開始
        this.drySensor.measure(
            (function(err) {
                if (err) {
                    // エラーならここで終了(計測値はnull)
                    callback(err);
                    return;
                }
                // 湿球の計測開始
                this.wetSensor.measure(
                    (function(err) {
                        if (err) {
                            // エラーならここで終了(計測値はnull)
                            callback(err);
                            return;
                        }
                        // 湿度の計算開始
                        var dry = this.drySensor.celsius;
                        var wet = this.wetSensor.celsius;
                        //   飽和水蒸気分圧を取得
                        var ps  = 6.11 * Math.pow(10, (7.5 * dry / (237.3 + dry)));
                        var pws = 6.11 * Math.pow(10, (7.5 * wet / (237.3 + wet)));
                        //   ペルンターの式による水蒸気圧を取得
                        var pt  = pws - 0.0012 * 1013.25 * (dry - wet) * (1 + wet / 610);
                        // 計算結果をセットし完了のコールバック
                        this.humidity = Math.round(pt / ps * 100);
                        this.celsius = dry;
                        callback();
                    }).bind(this)
                );
            }).bind(this)
        );
    },
    /**
     * カンマ区切りの計測値を返す
     * @return {String}
     */
    toString: function() {
        return ''
            + ',' + this.celsius
            + ',' + this.humidity
        ;
    },
};